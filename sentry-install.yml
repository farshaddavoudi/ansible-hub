---
# Sentry Self-Hosted Installation & Update Playbook
# Designed for Docker/Docker Compose environments
# Optional reverse proxy via sentry_url
# Optional Matrix webhook integration
- name: Install/Update Sentry
  hosts: sentry_servers
  become: yes

  tasks:
    - name: Ensure Sentry directory exists
      file:
        path: "{{ sentry_dir }}"
        state: directory
        mode: 0755

    - name: Checkout Sentry self-hosted repository
      git:
        repo: https://github.com/getsentry/self-hosted.git  # Default repo
        version: "{{ sentry_version }}"
        dest: "{{ sentry_dir }}"
        force: true
      register: sentry_repo

    - name: Remove any existing docker-compose override files that might contain custom images
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sentry_dir }}/docker-compose.override.yml"
        - "{{ sentry_dir }}/docker-compose.local.yml"
      ignore_errors: true

    - name: Configure .env file
      lineinfile:
        path: "{{ sentry_dir }}/.env"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      loop:
        - { key: "SENTRY_BIND", value: "{{ sentry_port }}" }
        - { key: "SENTRY_BEACON", value: "False" }
        # Disable external SMTP to avoid registry issues
        - { key: "SENTRY_USE_EXTERNAL_SMTP", value: "false" }
        # Optional Matrix webhook
        - { key: "SENTRY_MATRIX_HOOKSHOT_URL", value: "{{ matrix_hookshot_url | default('') }}" }
        - { key: "SENTRY_MATRIX_ROOM_ID", value: "{{ matrix_room_id | default('') }}" }

    - name: Run Sentry install script if repository changed
      command: ./install.sh --no-user-prompt
      args:
        chdir: "{{ sentry_dir }}"
      when: sentry_repo.after != sentry_repo.before

    - name: Remove problematic SMTP service completely using sed
      shell: |
        # Remove SMTP service block from docker-compose.yml
        sed -i '/^  smtp:/,/^  [a-zA-Z]/{ /^  [a-zA-Z]/!d; /^  smtp:/d; }' docker-compose.yml
        # Also remove any standalone smtp: lines
        sed -i '/^  smtp:$/d' docker-compose.yml
        # Remove SMTP dependencies from other services
        sed -i '/^[[:space:]]*- smtp$/d' docker-compose.yml
        sed -i '/^[[:space:]]*smtp$/d' docker-compose.yml
        # Remove SMTP from depends_on lists
        sed -i 's/,\s*smtp//g' docker-compose.yml
        sed -i 's/smtp\s*,//g' docker-compose.yml
      args:
        chdir: "{{ sentry_dir }}"
      ignore_errors: true

    - name: Remove SMTP dependencies from web service specifically
      replace:
        path: "{{ sentry_dir }}/docker-compose.yml"
        regexp: '(\s+depends_on:\s*\n(?:\s+- [^\n]+\n)*)\s+- smtp\s*\n'
        replace: '\1'
      ignore_errors: true

    - name: Remove SMTP dependencies from web service (alternative format)
      replace:
        path: "{{ sentry_dir }}/docker-compose.yml"
        regexp: '(\s+depends_on:\s*\[.*?),\s*smtp(.*?\])'
        replace: '\1\2'
      ignore_errors: true

    - name: Final cleanup - remove any remaining smtp references
      shell: |
        # Remove any lines containing just 'smtp' in dependency contexts
        sed -i '/depends_on:/,/^[[:space:]]*[a-zA-Z_-]*:/ { /^[[:space:]]*smtp[[:space:]]*$/d; }' docker-compose.yml
        # Remove trailing commas that might be left behind
        sed -i 's/,[[:space:]]*]/]/g' docker-compose.yml
        sed -i 's/,[[:space:]]*$//' docker-compose.yml
      args:
        chdir: "{{ sentry_dir }}"
      ignore_errors: true

    - name: Fix YAML syntax issues in docker-compose file
      shell: |
        # Fix empty arrays/lists that might have been created
        sed -i 's/\[\s*,/[/g' docker-compose.yml
        sed -i 's/,\s*\]/]/g' docker-compose.yml
        sed -i 's/\[\s*\]/[]/g' docker-compose.yml
        # Fix empty depends_on sections
        sed -i '/depends_on:\s*\[\s*\]/d' docker-compose.yml
        sed -i '/depends_on:\s*$/N; /depends_on:\s*\n\s*$/d' docker-compose.yml
        # Remove any malformed array syntax
        sed -i '/depends_on:/,/^[[:space:]]*[a-zA-Z_-]*:/ { s/\[\s*\([^]]*\)\s*\]/[\1]/g; }' docker-compose.yml
      args:
        chdir: "{{ sentry_dir }}"
      ignore_errors: true

    - name: Clean up docker-compose.yml using Python to fix YAML syntax
      shell: |
        python3 -c "
        import yaml
        import sys
        
        try:
            # Read the file
            with open('docker-compose.yml', 'r') as f:
                content = f.read()
            
            # Try to parse and fix common issues
            lines = content.split('\n')
            fixed_lines = []
            
            for line in lines:
                # Fix malformed depends_on arrays
                if 'depends_on:' in line and '[' in line and ']' in line:
                    # Extract the array content and clean it
                    import re
                    match = re.search(r'depends_on:\s*\[(.*?)\]', line)
                    if match:
                        deps = [dep.strip().strip('\"\'') for dep in match.group(1).split(',') if dep.strip() and dep.strip() != 'smtp']
                        if deps:
                            line = re.sub(r'depends_on:\s*\[.*?\]', f'depends_on: [{\", \".join(deps)}]', line)
                        else:
                            continue  # Skip empty depends_on
                
                # Skip lines that only contain 'smtp' in arrays
                if line.strip() == 'smtp' or line.strip() == '- smtp':
                    continue
                    
                fixed_lines.append(line)
            
            # Write back the fixed content
            with open('docker-compose.yml', 'w') as f:
                f.write('\n'.join(fixed_lines))
                
        except Exception as e:
            print(f'Error: {e}', file=sys.stderr)
            sys.exit(0)  # Don't fail the playbook
        "
      args:
        chdir: "{{ sentry_dir }}"
      ignore_errors: true

    - name: Validate docker-compose file before proceeding
      shell: docker-compose config
      args:
        chdir: "{{ sentry_dir }}"
      register: compose_validation
      ignore_errors: true

    - name: Show compose validation result
      debug:
        msg: "Docker-compose validation: {{ compose_validation.stderr if compose_validation.failed else 'OK' }}"

    - name: Create required Docker volumes for Sentry
      docker_volume:
        name: "{{ item }}"
        state: present
      loop:
        - sentry-data
        - sentry-postgres
        - sentry-redis
        - sentry-zookeeper
        - sentry-kafka
        - sentry-clickhouse
        - sentry-symbolicator

    - name: Ensure Sentry is running before configuration
      docker_compose:
        project_src: "{{ sentry_dir }}"
        remove_orphans: true
        state: present

    - name: Wait for Sentry config.yml to be created
      wait_for:
        path: "{{ sentry_dir }}/sentry/config.yml"
        timeout: 300
      when: sentry_url is defined

    - name: Configure sentry config.yml for external URL (reverse proxy)
      lineinfile:
        path: "{{ sentry_dir }}/sentry/config.yml"
        regexp: "^#?\\s*system.url-prefix:"
        line: "system.url-prefix: {{ sentry_url }}"
      when: sentry_url is defined
      notify: Restart Sentry

    - name: Start Sentry docker-compose stack
      docker_compose:
        project_src: "{{ sentry_dir }}"
        remove_orphans: true
        state: present

    - name: Create Sentry superusers
      command: >
        docker-compose run --rm web createuser
          --email "{{ item.email }}"
          --password "{{ item.password }}"
          --superuser
          --no-input
      args:
        chdir: "{{ sentry_dir }}"
      loop: "{{ sentry_superusers }}"
      ignore_errors: true

  handlers:
    - name: Restart Sentry
      docker_compose:
        project_src: "{{ sentry_dir }}"
        remove_orphans: true
        state: present
        restart: true
