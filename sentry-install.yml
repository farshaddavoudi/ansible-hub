---
# Sentry Self-Hosted Installation & Update Playbook
# Designed for Docker/Docker Compose environments
# Optional reverse proxy via sentry_url
- name: Install/Update Sentry
  hosts: sentry_servers
  become: yes

  roles:
    - apt-fix  # Ensures apt is in clean state for package installations

  tasks:
    - name: Ensure Sentry directory exists
      file:
        path: "{{ sentry_dir }}"
        state: directory
        mode: 0755

    - name: Checkout Sentry self-hosted repository
      git:
        repo: https://github.com/getsentry/self-hosted.git  # Default repo
        version: "{{ sentry_version }}"
        dest: "{{ sentry_dir }}"
        force: true
      register: sentry_repo

    - name: Remove any existing docker-compose override files that might contain custom images
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ sentry_dir }}/docker-compose.override.yml"
        - "{{ sentry_dir }}/docker-compose.local.yml"
      ignore_errors: true

    - name: Configure .env file
      lineinfile:
        path: "{{ sentry_dir }}/.env"
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      loop:
        - { key: "SENTRY_BIND", value: "{{ sentry_port }}" }
        - { key: "SENTRY_BEACON", value: "False" }
        # Disable external SMTP to avoid registry issues
        - { key: "SENTRY_USE_EXTERNAL_SMTP", value: "false" }

    - name: Install required packages for Sentry
      apt:
        name:
          - curl
          - git
          - python3
          - python3-pip
        state: present
        update_cache: false  # apt-fix role already updated cache

    - name: Run Sentry install script
      shell: |
        export REPORT_SELF_HOSTED_ISSUES=0
        export DEBIAN_FRONTEND=noninteractive
        echo "n" | timeout 300 ./install.sh --skip-user-creation --no-report-self-hosted-issues
      args:
        chdir: "{{ sentry_dir }}"
      async: 300
      poll: 10
      ignore_errors: true

    # - name: Replace problematic SMTP image with working alternative
    #   replace:
    #     path: "{{ sentry_dir }}/docker-compose.yml"
    #     regexp: 'registry\.gitlab\.com/egos-tech/smtp.*'
    #     replace: 'namshi/smtp:latest'
    #   ignore_errors: true

    # - name: Replace problematic GitHub Container Registry images with Docker Hub alternatives
    #   replace:
    #     path: "{{ sentry_dir }}/docker-compose.yml"
    #     regexp: 'ghcr\.io/getsentry/snuba:{{ sentry_version }}'
    #     replace: 'getsentry/snuba:{{ sentry_version }}'
    #   ignore_errors: true

    # - name: Replace other ghcr.io images if they exist
    #   replace:
    #     path: "{{ sentry_dir }}/docker-compose.yml"
    #     regexp: 'ghcr\.io/getsentry/([^:]+):([^\s]+)'
    #     replace: 'getsentry/\1:\2'
    #   ignore_errors: true

    # - name: Force replace all ghcr.io references with docker.io
    #   shell: |
    #     sed -i 's|ghcr\.io/getsentry/|getsentry/|g' docker-compose.yml
    #     sed -i 's|ghcr\.io/|docker.io/|g' docker-compose.yml
    #   args:
    #     chdir: "{{ sentry_dir }}"
    #   ignore_errors: true

    # - name: Show docker-compose changes for debugging
    #   shell: grep -n "getsentry\|ghcr\.io" docker-compose.yml || echo "No getsentry or ghcr.io references found"
    #   args:
    #     chdir: "{{ sentry_dir }}"
    #   register: image_refs
    #   ignore_errors: true

    # - name: Display image references found
    #   debug:
    #     msg: "Image references: {{ image_refs.stdout_lines }}"

    - name: Validate docker compose file before proceeding
      shell: docker compose config
      args:
        chdir: "{{ sentry_dir }}"
      register: compose_validation
      ignore_errors: true

    - name: Show compose validation result
      debug:
        msg: "Docker compose validation: {{ compose_validation.stderr if compose_validation.failed else 'OK' }}"

    - name: Create required Docker volumes for Sentry
      docker_volume:
        name: "{{ item }}"
        state: present
      loop:
        - sentry-data
        - sentry-postgres
        - sentry-redis
        - sentry-zookeeper
        - sentry-kafka
        - sentry-clickhouse
        - sentry-symbolicator

    # - name: Ensure Sentry is running before configuration > docker compose up
    #   docker_compose:
    #     project_src: "{{ sentry_dir }}"
    #     remove_orphans: true
    #     state: present

    - name: Run docker compose
      community.docker.docker_compose_v2:
        project_src: "{{ sentry_dir }}"
        state: present

    - name: Wait for Sentry config.yml to be created
      wait_for:
        path: "{{ sentry_dir }}/sentry/config.yml"
        timeout: 300
      when: sentry_url is defined

    - name: Configure sentry config.yml for external URL (reverse proxy)
      lineinfile:
        path: "{{ sentry_dir }}/sentry/config.yml"
        regexp: "^#?\\s*system.url-prefix:"
        line: "system.url-prefix: {{ sentry_url }}"
      when: sentry_url is defined
      notify: Restart Sentry

    - name: Start Sentry docker-compose stack
      docker_compose:
        project_src: "{{ sentry_dir }}"
        remove_orphans: true
        state: present

    - name: Create Sentry superusers
      command: >
        docker-compose run --rm web createuser
          --email "{{ item.email }}"
          --password "{{ item.password }}"
          --superuser
          --no-input
      args:
        chdir: "{{ sentry_dir }}"
      loop: "{{ sentry_superusers }}"
      ignore_errors: true

  handlers:
    - name: Restart Sentry
      docker_compose:
        project_src: "{{ sentry_dir }}"
        remove_orphans: true
        state: present
        restart: true
