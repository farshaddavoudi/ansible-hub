//
// Docker discovery for Windows
//
discovery.docker "docker_log_windows" {
  host = "npipe:////./pipe/docker_engine"
}

//
// Relabel and metadata mapping
//
discovery.relabel "container_logs_windows" {
  targets = discovery.docker.docker_log_windows.targets

  // Map container metadata to labels
  rule { source_labels = ["__meta_docker_container_name"]; target_label = "container_name" }
  rule { source_labels = ["__meta_docker_network_ip"]; target_label = "container_network_ip" }
  rule { source_labels = ["__meta_docker_container_network_mode"]; target_label = "container_network_mode" }

  // Keep container_id as field instead of label
  rule { source_labels = ["__meta_docker_container_id"]; target_label = "__field_container_id" }
}

//
// Docker source
//
loki.source.docker "docker_log_source_windows" {
  host       = "npipe:////./pipe/docker_engine"
  targets    = discovery.relabel.container_logs_windows.output
  forward_to = [loki.relabel.docker_normalized_windows.receiver]
}

//
// Level normalization, fallback, and static labels
//
loki.relabel "docker_normalized_windows" {
  forward_to = [loki.write.docker_windows_loki.receiver]

  // Static labels
  rule { target_label = "source";   replacement = "server" }
  rule { target_label = "server";   replacement = "{{ server_identifier }}" }
  rule { target_label = "service_name"; replacement = "{{ server_identifier }}" }
  rule { target_label = "category"; replacement = "docker" }
  rule { target_label = "log_type"; replacement = "docker" }

  // Extract level from log line if present
  rule { source_labels = ["__line__"]; target_label = "level"; regex = "(?i).*\\blevel=(debug|info|warn|warning|error|fatal|crit|critical)\\b.*"; replacement = "$1" }
  rule { source_labels = ["__line__"]; target_label = "level"; regex = "(?i)^\\[?(debug|info|notice|warn|warning|error|fatal|crit|critical)\\]?.*"; replacement = "$1" }

  // Normalize variants â†’ standard set
  rule { source_labels = ["level"]; target_label = "level"; regex = "warn";      replacement = "warning" }
  rule { source_labels = ["level"]; target_label = "level"; regex = "notice";    replacement = "info" }
  rule { source_labels = ["level"]; target_label = "level"; regex = "err";       replacement = "error" }
  rule { source_labels = ["level"]; target_label = "level"; regex = "crit";      replacement = "critical" }
  rule { source_labels = ["level"]; target_label = "level"; regex = "emerg";     replacement = "fatal" }

  // Fallback: if level is empty, assign "info"
  rule { source_labels = ["level"]; target_label = "level"; regex = "^$"; replacement = "info" }
}

//
// Common Loki writer
//
loki.write "docker_windows_loki" {
  endpoint {
    url = "{{ loki_endpoint_url }}"
  }
}