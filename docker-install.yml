# Make sure the community.docker collection is installed:
# `ansible-galaxy collection install community.docker`
---
- name: Install Docker
  hosts: docker_servers
  become: true
    
  pre_tasks:
    - name: Check for stuck apt processes
      shell: ps aux | grep -E "apt-get|dpkg|unattended-upgrade" | grep -v grep
      register: apt_processes
      changed_when: false
      failed_when: false

    - name: Kill stuck apt processes if found
      shell: pkill -f "apt-get|dpkg|unattended-upgrade" || true
      when: apt_processes.stdout_lines | length > 0
      changed_when: false
      failed_when: false

    - name: Remove apt lock files if they exist
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/apt/lists/lock
        - /var/cache/apt/archives/lock
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
      failed_when: false
      when: apt_processes.stdout_lines | length > 0

    - name: Clean apt cache and lists
      shell: |
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        mkdir -p /var/lib/apt/lists/partial
      changed_when: false
      failed_when: false

    - name: Update apt cache manually
      shell: apt-get update
      register: apt_update_result
      failed_when: false
      changed_when: false

    - name: Debug apt update issues
      debug:
        msg: "Apt update result: {{ apt_update_result }}"
      when: apt_update_result.rc != 0

    - name: Ensure python3-pip is installed
      apt:
        name: python3-pip
        state: present
        update_cache: false  # Don't update cache here since we did it manually above
      register: apt_result
      until: apt_result is succeeded
      retries: 3
      delay: 5

    - name: Install Docker SDK for Python via apt (primary method)
      apt:
        name: python3-docker
        state: present
      register: apt_docker_result
      failed_when: false

    - name: Install Docker SDK via pip using Tsinghua mirror (if apt failed)
      pip:
        name: docker
        state: present
        extra_args: --break-system-packages --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn
      register: pip_tsinghua_result
      when: apt_docker_result.failed | default(false)

    - name: Try Douban mirror as last resort
      pip:
        name: docker
        state: present
        extra_args: --break-system-packages --index-url https://pypi.douban.com/simple/ --trusted-host pypi.douban.com
      register: pip_douban_result
      failed_when: false
      when: 
        - apt_docker_result.failed | default(false)
        - pip_tsinghua_result.failed | default(true)

    - name: Verify Docker SDK installation
      command: python3 -c "import docker; print('Docker SDK installed successfully')"
      register: docker_sdk_check
      changed_when: false

  roles:
    - role: geerlingguy.docker

  post_tasks:
    - name: Install docker-compose via apt
      apt:
        name: docker-compose
        state: present

    - name: Create Portainer data directory
      file:
        path: "{{ portainer.config_dir }}/data"
        state: directory
        mode: '0755'
      when: portainer.install

    - name: Ensure proxy network exists
      community.docker.docker_network:
        name: "{{ portainer.docker_network_name }}"
        state: present
      when: portainer.install

    - name: Pull Portainer image
      community.docker.docker_image:
        name: portainer/portainer-ce:latest
        source: pull
      when: portainer.install

    - name: Run Portainer container
      community.docker.docker_container:
        name: portainer
        image: portainer/portainer-ce:latest
        state: started
        restart_policy: unless-stopped
        ports:
          - "8000:8000"
          - "9443:9443"
          - "9000:9000"
        volumes:
          - "{{ docker_root_path }}:{{ docker_root_path }}"  # This ensures /srv/docker on host is visible inside Portainer
          - "{{ portainer.config_dir }}/data:/data"
          - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - name: "{{ portainer.docker_network_name }}"
        labels: "{{ portainer.traefik_labels if portainer.enable_traefik_labels else {} }}"
        recreate: true
      when: portainer.install