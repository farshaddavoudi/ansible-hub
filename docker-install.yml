# Make sure the community.docker collection is installed:
# `ansible-galaxy collection install community.docker`
---
- name: Install Docker
  hosts: docker_servers
  become: true
    
  pre_tasks:
    - name: Check for stuck apt processes
      shell: ps aux | grep -E "apt-get|dpkg|unattended-upgrade" | grep -v grep
      register: apt_processes
      changed_when: false
      failed_when: false

    - name: Kill stuck apt processes if found
      shell: pkill -f "apt-get|dpkg|unattended-upgrade" || true
      when: apt_processes.stdout_lines | length > 0
      changed_when: false
      failed_when: false

    - name: Remove apt lock files if they exist
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/apt/lists/lock
        - /var/cache/apt/archives/lock
        - /var/lib/dpkg/lock
        - /var/lib/dpkg/lock-frontend
      failed_when: false
      when: apt_processes.stdout_lines | length > 0

    - name: Clean apt cache and lists
      shell: |
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        mkdir -p /var/lib/apt/lists/partial
      changed_when: false
      failed_when: false

    - name: Update apt cache manually
      shell: apt-get update
      register: apt_update_result
      failed_when: false
      changed_when: false

    - name: Ensure python3-pip is installed
      apt:
        name: python3-pip
        state: present
        update_cache: false  # Don't update cache here since we did it manually above
      register: apt_result
      until: apt_result is succeeded
      retries: 2
      delay: 5

    - name: Install Docker SDK for Python via apt
      apt:
        name: python3-docker
        state: present
      register: apt_docker_result
      failed_when: false

    - name: Install Docker SDK via pip using accessible mirror (fallback)
      pip:
        name: docker
        state: present
        extra_args: --break-system-packages --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn
      when: apt_docker_result.failed | default(false)

  roles:
    - role: geerlingguy.docker

  post_tasks:
    - name: Remove old docker-compose if installed via apt
      apt:
        name: docker-compose
        state: absent
      ignore_errors: true

    - name: Install latest docker-compose from GitHub
      shell: |
        # Download latest docker-compose
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        # Create symlink for compatibility
        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    - name: Verify docker-compose installation
      shell: docker-compose --version
      register: compose_version

    - name: Show docker-compose version
      debug:
        msg: "Installed docker-compose version: {{ compose_version.stdout }}"

    - name: Stop Docker service to fix configuration
      systemd:
        name: docker
        state: stopped
      failed_when: false

    - name: Backup existing daemon.json if it contains problematic settings
      shell: |
        if [ -f /etc/docker/daemon.json ] && grep -q '"dns"' /etc/docker/daemon.json; then
          cp /etc/docker/daemon.json /etc/docker/daemon.json.backup
        fi
      failed_when: false
      changed_when: false

    - name: Test daemon.json syntax before applying
      shell: |
        echo '{
          "registry-mirrors": [
            "https://docker.arvancloud.ir",
            "https://docker.mirrors.sjtug.sjtu.edu.cn",
            "https://registry-1.docker.io",
            "https://mirror.baidubce.com"
          ],
          "insecure-registries": [
            "docker.arvancloud.ir"
          ]
        }' | python3 -m json.tool > /dev/null
      register: json_test
      failed_when: false

    - name: Ensure Docker daemon configuration is clean and valid
      copy:
        content: |
          {
            "registry-mirrors": [
              "https://docker.arvancloud.ir",
              "https://docker.mirrors.sjtug.sjtu.edu.cn",
              "https://registry-1.docker.io",
              "https://mirror.baidubce.com"
            ],
            "insecure-registries": [
              "docker.arvancloud.ir"
            ]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      when: json_test.rc == 0

    - name: Use minimal daemon.json if validation failed
      copy:
        content: |
          {
            "registry-mirrors": []
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      when: json_test.rc != 0

    - name: Reload systemd daemon
      systemd:
        daemon_reload: true

    - name: Start Docker service and check status
      systemd:
        name: docker
        state: started
        enabled: true
      register: docker_start
      failed_when: false

    - name: Check Docker service status if start failed
      shell: |
        echo "=== Docker service status ==="
        systemctl status docker.service --no-pager -l
        echo "=== Docker journal logs ==="
        journalctl -xeu docker.service --no-pager -l --since "5 minutes ago"
      register: docker_debug
      when: docker_start.failed

    - name: Show Docker debug information
      debug:
        msg: "{{ docker_debug.stdout_lines }}"
      when: docker_start.failed

    - name: Try starting Docker with minimal config if it failed
      block:
        - name: Create minimal daemon.json
          copy:
            content: "{}"
            dest: /etc/docker/daemon.json
            mode: '0644'

        - name: Reload systemd and restart Docker
          systemd:
            name: docker
            state: restarted
            enabled: true
            daemon_reload: true
      when: docker_start.failed

    - name: Create Portainer data directory
      file:
        path: "{{ portainer.config_dir }}/data"
        state: directory
        mode: '0755'
      when: portainer.install

    - name: Ensure proxy network exists
      community.docker.docker_network:
        name: "{{ portainer.docker_network_name }}"
        state: present
      when: portainer.install

    - name: Pull Portainer image
      community.docker.docker_image:
        name: portainer/portainer-ce:latest
        source: pull
      when: portainer.install

    - name: Run Portainer container
      community.docker.docker_container:
        name: portainer
        image: portainer/portainer-ce:latest
        state: started
        restart_policy: unless-stopped
        ports:
          - "8000:8000"
          - "9443:9443"
          - "9000:9000"
        volumes:
          - "{{ docker_root_path }}:{{ docker_root_path }}"  # This ensures /srv/docker on host is visible inside Portainer
          - "{{ portainer.config_dir }}/data:/data"
          - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - name: "{{ portainer.docker_network_name }}"
        labels: "{{ portainer.traefik_labels if portainer.traefik_labels.enable else {} }}"
        recreate: true
      when: portainer.install